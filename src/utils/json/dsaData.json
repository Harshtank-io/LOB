{
    "dsa_concepts": [
      {
        "id": "arrays",
        "title": "Arrays",
        "content": "Arrays are ordered collections of elements, each identified by an index or a key. They are used to store and manipulate a fixed-size sequence of elements, making them a fundamental data structure in computer science.",
        "code_example": {
          "code": "#include <stdio.h>\n\nint main() {\n    int arr[5] = {1, 2, 3, 4, 5};\n\n    // Accessing array elements\n    for (int i = 0; i < 5; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}",
          "output": "1 2 3 4 5"
        }
      },
      {
        "id": "linked_lists",
        "title": "Linked Lists",
        "content": "A linked list is a linear data structure where elements are connected using pointers. Each element (node) has a value and a reference to the next node, allowing dynamic memory allocation and efficient insertions and deletions.",
        "code_example": {
          "code": "// C code for linked list\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* next;\n};\n\nint main() {\n    struct Node* head = NULL;\n\n    // Inserting elements into the linked list\n    head = (struct Node*)malloc(sizeof(struct Node));\n    head->data = 1;\n    head->next = NULL;\n\n    struct Node* second = (struct Node*)malloc(sizeof(struct Node));\n    second->data = 2;\n    second->next = NULL;\n    head->next = second;\n\n    return 0;\n}",
          "output": null
        }
      },
      {
        "id": "stacks",
        "title": "Stacks",
        "content": "A stack is a linear data structure that follows the Last-In-First-Out (LIFO) principle. Elements are inserted and removed from the same end, making it useful for tasks like function call management and expression evaluation.",
        "code_example": {
          "code": "// C code for stack\n#include <stdio.h>\n#define MAX_SIZE 10\n\nint stack[MAX_SIZE];\nint top = -1;\n\nvoid push(int value) {\n    if (top < MAX_SIZE - 1) {\n        stack[++top] = value;\n    }\n}\n\nint pop() {\n    if (top >= 0) {\n        return stack[top--];\n    }\n    return -1; // Empty stack\n}\n\nint main() {\n    push(1);\n    push(2);\n    int poppedValue = pop();\n    printf(\"Popped value: %d\\n\", poppedValue);\n\n    return 0;\n}",
          "output": "Popped value: 2"
        }
      },
      {
        "id": "queues",
        "title": "Queues",
        "content": "A queue is a linear data structure that follows the First-In-First-Out (FIFO) principle. Elements are inserted at one end (rear) and removed from the other end (front), making it suitable for tasks like process scheduling.",
        "code_example": {
          "code": "// C code for queue\n#include <stdio.h>\n#include <stdlib.h>\n#define MAX_SIZE 10\n\nint queue[MAX_SIZE];\nint front = -1, rear = -1;\n\nvoid enqueue(int value) {\n    if (rear < MAX_SIZE - 1) {\n        if (front == -1) {\n            front = 0;\n        }\n        queue[++rear] = value;\n    }\n}\n\nint dequeue() {\n    if (front <= rear) {\n        return queue[front++];\n    }\n    return -1; // Empty queue\n}\n\nint main() {\n    enqueue(1);\n    enqueue(2);\n    int dequeuedValue = dequeue();\n    printf(\"Dequeued value: %d\\n\", dequeuedValue);\n\n    return 0;\n}",
          "output": "Dequeued value: 1"
        }
      },
      {
        "id": "binary_trees",
        "title": "Binary Trees",
        "content": "A binary tree is a hierarchical data structure where each node has at most two children: a left child and a right child. They are used for tasks like searching, sorting, and organizing hierarchical data.",
        "code_example": {
          "code": "// C code for binary tree\n#include <stdio.h>\n#include <stdlib.h>\n\nstruct Node {\n    int data;\n    struct Node* left;\n    struct Node* right;\n};\n\nint main() {\n    struct Node* root = NULL;\n\n    // Creating a binary tree\n    root = (struct Node*)malloc(sizeof(struct Node));\n    root->data = 1;\n    root->left = NULL;\n    root->right = NULL;\n\n    struct Node* leftChild = (struct Node*)malloc(sizeof(struct Node));\n    leftChild->data = 2;\n    leftChild->left = NULL;\n    leftChild->right = NULL;\n    root->left = leftChild;\n\n    return 0;\n}",
          "output": null
        }
      },
      {
        "id": "sorting_algorithms",
        "title": "Sorting Algorithms",
        "content": "Sorting algorithms arrange elements in a specific order, such as ascending or descending. Common sorting algorithms include Bubble Sort, Selection Sort, Insertion Sort, Merge Sort, and Quick Sort.",
        "code_example": {
          "code": "// C code for Bubble Sort\n#include <stdio.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n - 1; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n            if (arr[j] > arr[j + 1]) {\n                // Swap arr[j] and arr[j + 1]\n                int temp = arr[j];\n                arr[j] = arr[j + 1];\n                arr[j + 1] = temp;\n            }\n        }\n    }\n}\n\nint main() {\n    int arr[] = {5, 1, 4, 2, 8};\n    int n = sizeof(arr) / sizeof(arr[0]);\n\n    bubbleSort(arr, n);\n\n    printf(\"Sorted array: \");\n    for (int i = 0; i < n; i++) {\n        printf(\"%d \", arr[i]);\n    }\n\n    return 0;\n}",
          "output": "Sorted array: 1 2 4 5 8"
        }
      },
      {
        "id": "searching_algorithms",
        "title": "Searching Algorithms",
        "content": "Searching algorithms locate a specific element within a collection of data. Common searching algorithms include Linear Search and Binary Search.",
        "code_example": {
          "code": "// C code for Binary Search\n#include <stdio.h>\n\nint binarySearch(int arr[], int n, int target) {\n    int left = 0, right = n - 1;\n    while (left <= right) {\n        int mid = left + (right - left) / 2;\n        if (arr[mid] == target) {\n            return mid;\n        }\n        if (arr[mid] < target) {\n            left = mid + 1;\n        } else {\n            right = mid - 1;\n        }\n    }\n    return -1; // Element not found\n}\n\nint main() {\n    int arr[] = {1, 2, 3, 4, 5};\n    int n = sizeof(arr) / sizeof(arr[0]);\n    int target = 3;\n\n    int result = binarySearch(arr, n, target);\n\n    if (result != -1) {\n        printf(\"Element found at index %d\\n\", result);\n    } else {\n        printf(\"Element not found\\n\");\n    }\n\n    return 0;\n}",
          "output": "Element found at index 2"
        }
      }
    ]
  }
  